{
  "description": "Prints a greeting and your org id(s)!",
  "resultformatFlagDescription": "the result format of the output. If dot is chosen, org will be shown as dependency image in .dot file format. If xml is chosen, a package.xml for the org will be created and outputted to the console. To put in a specific folder, use outputdir; ignore with --json",
  "metadatacomponentnameFlagDescription": "filter by component in the format '<entityType>:<entityName>; e.g. CustomField:Thumbnail",
  "querycriteriaFlagDescription": "the criteria to filter the dependency records; e.g. RefMetadataComponentName='Thumbnail'",
  "includeListDescription": "the list of fields to include when querying. Separate fields by commas. Adding a colon allows you to specify the name of specific custom object to include e.g 'CustomField:Thumbnail, CustomObject'",
  "excludeListDescription": "list of fields to exclude when querying. Adding a colon allows you to specify the name of specific custom object to exclude e.g 'CustomField:Thumbnail, CustomObject'",
  "generateManifestDescription": "Boolean flag for whether or not you want a package.xml to be created (in addition to the result format). If this flag is used without an output directory, it will create package.xml in the current directory",
  "outputDirDescription": "Where you want to store the outputted result. If used, will not output to the console. Will automatically store dot output as 'graph.dot' in the given directory, and xml output as 'package.xml'. If used with --generatemanifest flag, a package.xml will automatically be put inside the outputdir",
  "getIncludeDependencies": "For all objects in the include list, get all dependencies, including dependencies for dependencies",
  "getIncludeDependents":"For all objects in the include list, get all components that depend on that component, directly or indirectly",
  "excludePackageDescription": "Does not include any of the objects listed in an attached package.xml into the generated package.xml",
  "validateDescription": "Validates the created package.xml using force:mdapi:retrieve and force:mdapi:deploy. Does nothing if it is a valid package.xml, but will error if it is invalid. Takes a long time to validate (force:mdapi:deploy)",
  "example1": "$ sfdx andyinthelcloud:depends --includelist CustomField:Thumbnail --generatemanifest --outputdir OutputFolder "
}
